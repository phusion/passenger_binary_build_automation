#!/bin/bash
set -e
ROOTDIR=`dirname "$0"`
ROOTDIR=`cd "$ROOTDIR/.." && pwd`
SELFDIR=`dirname "$0"`
SELFDIR=`cd "$SELFDIR" && pwd`
source "$ROOTDIR/shared/lib/library.sh"

CACHE_DIR=
OUTPUT_DIR=
CONCURRENCY=2

function usage()
{
	echo "Usage: ./setup-runtime [OPTIONS]"
	echo "Setup the runtime."
	echo
	echo "Required options:"
	echo "  -o DIR     Path in which to store the runtime"
	echo
	echo "Optional options:"
	echo "  -w DIR     Path to workspace. Default: create a temporary one"
	echo "  -c DIR     Path to cache directory (requires ccache)"
	echo "  -j NUM     Set build concurrency. Default: 2"
	echo
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "c:o:w:j:h" opt; do
		case "$opt" in
		c)
			CACHE_DIR="$OPTARG"
			;;
		o)
			OUTPUT_DIR="$OPTARG"
			;;
		w)
			WORKDIR="$OPTARG"
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	if [[ -n "$CACHE_DIR" && ! -e "$CACHE_DIR" ]]; then
		echo "ERROR: $CACHE_DIR does not exist."
		exit 1
	fi
	if [[ "$OUTPUT_DIR" = "" ]]; then
		echo "ERROR: please specify an output directory with -o."
		exit 1
	fi
	if [[ ! -e "$OUTPUT_DIR" ]]; then
		echo "ERROR: $OUTPUT_DIR does not exist."
		exit 1
	fi
}

parse_options "$@"


############


export OUTPUT_DIR="`absolute_path \"$OUTPUT_DIR\"`"
export RUNTIME_DIR="$OUTPUT_DIR"
source "$SELFDIR/support/reset_environment.sh"

export CONCURRENCY
export PATH="$ROOTDIR/macos/support/bin:$RUNTIME_DIR/bin:$PATH"
if [[ -n "$CACHE_DIR" ]]; then
	export CACHE_DIR="`absolute_path \"$CACHE_DIR\"`"
	export CCACHE_DIR="$CACHE_DIR/ccache-runtime"
	export PATH="$ROOTDIR/macos/support/ccache-wrappers:$PATH"
fi

if [[ -n "$WORKDIR" ]]; then
	export WORKDIR=$(absolute_path "$WORKDIR")
	echo "+ rm -rf $WORKDIR/*"
	rm -rf "$WORKDIR"/*
else
	export WORKDIR=$(mktemp -d /tmp/pbba.XXXXXX)
	function cleanup()
	{
		echo "+ rm -rf $WORKDIR"
		rm -rf "$WORKDIR"
	}
fi

cd "$WORKDIR"

"$SELFDIR/runtime_setup_stages/version_lockdown.sh"
if [[ ! -e "$OUTPUT_DIR/lib/libz.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_zlib.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libzstd.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_zstd.sh"
fi
if [[ ! -e "$OUTPUT_DIR/bin/openssl" ]]; then
	"$SELFDIR/runtime_setup_stages/install_openssl.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libpsl.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_libpsl.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libcurl.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_libcurl.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libGeoIP.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_geoip.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libpcre.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_pcre.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libpcre2-posix.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_pcre2.sh"
fi
"$SELFDIR/runtime_setup_stages/install_gems.sh"

header "All done!"
