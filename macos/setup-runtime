#!/bin/bash
set -e
ROOTDIR=`dirname "$0"`
ROOTDIR=`cd "$ROOTDIR/.." && pwd`
SELFDIR=`dirname "$0"`
SELFDIR=`cd "$SELFDIR" && pwd`
source "$ROOTDIR/shared/lib/library.sh"

CACHE_DIR=
OUTPUT_DIR=
CONCURRENCY=2

function usage()
{
	echo "Usage: ./setup-runtime [OPTIONS]"
	echo "Setup the runtime."
	echo
	echo "Required options:"
	echo "  -c DIR     Path to cache directory"
	echo "  -o DIR     Path in which to store the runtime"
	echo
	echo "Optional options:"
	echo "  -j NUM     Set build concurrency. Default: 2"
	echo
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "c:o:j:h" opt; do
		case "$opt" in
		c)
			CACHE_DIR="$OPTARG"
			;;
		o)
			OUTPUT_DIR="$OPTARG"
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	if [[ ! -e "$CACHE_DIR" ]]; then
		echo "ERROR: $CACHE_DIR does not exist."
		exit 1
	fi
	if [[ "$OUTPUT_DIR" = "" ]]; then
		echo "ERROR: please specify an output directory with -o."
		exit 1
	fi
	if [[ ! -e "$OUTPUT_DIR" ]]; then
		echo "ERROR: $OUTPUT_DIR does not exist."
		exit 1
	fi
}

parse_options "$@"


############


export OUTPUT_DIR="`absolute_path \"$OUTPUT_DIR\"`"
export RUNTIME_DIR="$OUTPUT_DIR"
source "$SELFDIR/support/reset_environment.sh"

export CONCURRENCY
export PATH="$ROOTDIR/macos/support/bin:$RUNTIME_DIR/bin:$PATH"
if [[ "$CACHE_DIR" != "" ]]; then
	export CACHE_DIR="`absolute_path \"$CACHE_DIR\"`"
	export CCACHE_DIR="$CACHE_DIR/ccache-runtime"
fi

export WORKDIR=`mktemp -d /tmp/pbba.XXXXXX`
function cleanup()
{
	run rm -rf "$WORKDIR"
}

cd "$WORKDIR"

"$SELFDIR/runtime_setup_stages/version_lockdown.sh"
if [[ ! -e "$OUTPUT_DIR/bin/cmake" ]]; then
	"$SELFDIR/runtime_setup_stages/install_cmake.sh"
fi
if [[ ! -e "$OUTPUT_DIR/bin/ccache" ]]; then
	"$SELFDIR/runtime_setup_stages/install_ccache.sh"
fi
if [[ ! -e "$OUTPUT_DIR/bin/pkg-config" ]]; then
	"$SELFDIR/runtime_setup_stages/install_pkg_config.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libz.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_zlib.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libzstd.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_zstd.sh"
fi
if [[ ! -e "$OUTPUT_DIR/bin/openssl" ]]; then
	"$SELFDIR/runtime_setup_stages/install_openssl.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libcurl.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_libcurl.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libGeoIP.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_geoip.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libpcre.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_pcre.sh"
fi
if [[ ! -e "$OUTPUT_DIR/lib/libpcre2.a" ]]; then
	"$SELFDIR/runtime_setup_stages/install_pcre2.sh"
fi
if [[ ! -e "$OUTPUT_DIR/bin/s3cmd" ]]; then
	"$SELFDIR/runtime_setup_stages/install_s3cmd.sh"
fi
"$SELFDIR/runtime_setup_stages/install_gems.sh"

header "All done!"
