#!/bin/bash
set -e
ROOTDIR=$(dirname "$0")
ROOTDIR=$(cd "$ROOTDIR/.." && pwd)
SELFDIR=$(dirname "$0")
SELFDIR=$(cd "$SELFDIR" && pwd)
# shellcheck source=../shared/lib/library.sh
source "$ROOTDIR/shared/lib/library.sh"
MACOS_RUNTIME_VERSION=$(cat "$ROOTDIR/shared/definitions/macos_runtime_version")

RUNTIME_DIR=
INPUT_DIR=
VERSION=
FILE_SERVER_PASSWORD_FILE=
AWS_ACCESS_KEY=
AWS_SECRET_KEY_FILE=
ENTERPRISE=false
TESTING=true

function usage()
{
	echo "Usage: ./publish [OPTIONS]"
	echo "Publish packaged Passenger binaries."
	echo
	echo "Required options:"
	echo "  -r DIR     Path to the runtime"
	echo "  -i DIR     The output directory written to by package script"
	echo "  -v VERSION Passenger version number"
	echo "  -p PATH    File containing the binary build automation file server password"
	echo "  -a KEY     Amazon S3 access key"
	echo "  -s KEY     File containing the Amazon S3 secret key"
	echo
	echo "Optional options:"
	echo "  -E         Indicate that you are publishing Passenger Enterprise"
	echo "  -u         Indicate that you are publishing for production (as opposed to testing)"
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "r:i:v:p:a:s:Euh" opt; do
		case "$opt" in
		r)
			RUNTIME_DIR="$OPTARG"
			;;
		i)
			INPUT_DIR="$OPTARG"
			;;
		v)
			VERSION="$OPTARG"
			;;
		p)
			FILE_SERVER_PASSWORD_FILE="$OPTARG"
			;;
		a)
			AWS_ACCESS_KEY="$OPTARG"
			;;
		s)
			AWS_SECRET_KEY_FILE="$OPTARG"
			;;
		E)
			ENTERPRISE=true
			;;
		u)
			TESTING=false
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	if [[ "$RUNTIME_DIR" = "" ]]; then
		echo "ERROR: please specify a runtime directory with -r."
		exit 1
	fi
	if [[ ! -e "$RUNTIME_DIR" ]]; then
		echo "ERROR: $RUNTIME_DIR does not exist."
		exit 1
	fi
	if [[ "$INPUT_DIR" = "" ]]; then
		echo "ERROR: please specify an input directory with -i."
		exit 1
	fi
	if [[ "$FILE_SERVER_PASSWORD_FILE" = "" ]]; then
		echo "ERROR: please specify a file server password file with -p."
		exit 1
	fi
	if [[ "$AWS_ACCESS_KEY" = "" ]]; then
		echo "ERROR: please specify an AWS S3 access key with -a."
		exit 1
	fi
	if [[ "$AWS_SECRET_KEY_FILE" = "" ]]; then
		echo "ERROR: please specify an AWS S3 secret key file with -s."
		exit 1
	fi
}

parse_options "$@"

export RUNTIME_DIR="$RUNTIME_DIR"
# shellcheck source=support/reset_environment.sh
source "$SELFDIR/support/reset_environment.sh"
# shellcheck source=../shared/publish/determine_repo_and_bucket.sh
source "$ROOTDIR/shared/publish/determine_repo_and_bucket.sh"
export PATH="$RUNTIME_DIR/bin:$PATH"

INPUT_DIR=$(absolute_path "$INPUT_DIR")
FILE_SERVER_PASSWORD=$(cat "$FILE_SERVER_PASSWORD_FILE")
AWS_SECRET_KEY=$(cat "$AWS_SECRET_KEY_FILE")
export INPUT_DIR
export VERSION
export FILE_SERVER_PASSWORD
export AWS_ACCESS_KEY
export AWS_SECRET_KEY
export TESTING

check_macos_runtime_compatibility "$RUNTIME_DIR" "$MACOS_RUNTIME_VERSION"

WORKDIR=$(mktemp -d /tmp/publish.XXXXXXXX)
export WORKDIR
function cleanup()
{
	echo "+ rm -rf $WORKDIR"
	rm -rf "$WORKDIR"
}

export GPG_SIGNING_KEY=auto-software-signing@phusion.nl
export GPG_OPTS=()
"$ROOTDIR/shared/publish/publish.sh"
