#!/bin/bash
set -e
ROOTDIR=`dirname "$0"`
ROOTDIR=`cd "$ROOTDIR/.." && pwd`
DOCKER_IMAGE_VERSION=$(cat "$ROOTDIR/shared/definitions/docker_image_version")
source "$ROOTDIR/shared/lib/library.sh"

PASSENGER_DIR=
UNPACKAGED_INPUT_DIR=
PACKAGED_INPUT_DIR=
ARCHITECTURE=
LICENSE_KEY=

function usage()
{
	echo "Usage: ./test [OPTIONS] <TASKS...>"
	echo "Test built and packaged binaries."
	echo
	echo "Required options:"
	echo "  -p DIR     Path to Passenger source directory"
	echo "  -i DIR     Path to directory containing unpackaged build products"
	echo "  -I DIR     Path to directory containing packaged build products"
	echo "  -a ARCH    Architecture to test for (x86_64)"
	echo
	echo "Optional options:"
	echo "  -L PATH    Path to Passenger Enterprise license key"
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local ORIG_ARGV
	local opt
	while getopts "p:i:I:a:L:h" opt; do
		case "$opt" in
		p)
			PASSENGER_DIR="$OPTARG"
			;;
		i)
			UNPACKAGED_INPUT_DIR="$OPTARG"
			;;
		I)
			PACKAGED_INPUT_DIR="$OPTARG"
			;;
		a)
			ARCHITECTURE="$OPTARG"
			;;
		L)
			LICENSE_KEY="$OPTARG"
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true
	ORIG_ARGV=("$@")

	if [[ "$PASSENGER_DIR" = "" ]]; then
		echo "ERROR: please specify a Passenger source directory with -p."
		exit 1
	fi
	if [[ ! -e "$PASSENGER_DIR" ]]; then
		echo "ERROR: $PASSENGER_DIR does not exist."
		exit 1
	fi
	if [[ "$UNPACKAGED_INPUT_DIR" = "" ]]; then
		echo "ERROR: please specify an unpackaged input directory with -p."
		exit 1
	fi
	if [[ ! -e "$UNPACKAGED_INPUT_DIR" ]]; then
		echo "ERROR: $UNPACKAGED_INPUT_DIR does not exist."
		exit 1
	fi
	if [[ "$UNPACKAGED_INPUT_DIR" = "" ]]; then
		echo "ERROR: please specify a packaged input directory with -p."
		exit 1
	fi
	if [[ ! -e "$UNPACKAGED_INPUT_DIR" ]]; then
		echo "ERROR: $UNPACKAGED_INPUT_DIR does not exist."
		exit 1
	fi
	if [[ "$ARCHITECTURE" = "" ]]; then
		echo "ERROR: please specify an architecture with -a."
		exit 1
	fi
	if [[ "$ARCHITECTURE" != x86_64 ]]; then
		echo "ERROR: specified architecture ($ARCHITECTURE) not recognized. Please specify x86_64."
	fi
	if [[ "$LICENSE_KEY" != "" && ! -e "$LICENSE_KEY" ]]; then
		echo "ERROR: $LICENSE_KEY does not exist."
		exit 1
	fi
}

parse_options "$@"

DOCKER_EXTRA_ARGS=()
if tty -s; then
	DOCKER_EXTRA_ARGS+=(-t -i)
fi
if [[ "$LICENSE_KEY" != "" ]]; then
	DOCKER_EXTRA_ARGS+=(-v "$LICENSE_KEY:/etc/passenger-enterprise-license:ro")
fi
if [[ "$ARCHITECTURE" = x86_64 ]]; then
	DOCKER_IMAGE=phusion/passenger_binary_build_automation_64
fi

PASSENGER_DIR="`absolute_path \"$PASSENGER_DIR\"`"
PACKAGED_INPUT_DIR="`absolute_path \"$PACKAGED_INPUT_DIR\"`"
UNPACKAGED_INPUT_DIR="`absolute_path \"$UNPACKAGED_INPUT_DIR\"`"

echo "-------- Entering Docker container --------"
exec docker run --rm \
	-v "$ROOTDIR:/system:ro" \
	-v "$PASSENGER_DIR:/passenger:ro" \
	-v "$PACKAGED_INPUT_DIR:/packaged:ro" \
	-v "$UNPACKAGED_INPUT_DIR:/unpackaged:ro" \
	-e "APP_UID=`/usr/bin/id -u`" \
	-e "APP_GID=`/usr/bin/id -g`" \
	"${DOCKER_EXTRA_ARGS[@]}" \
	$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION \
	/system/linux/support/test-script-docker-entrypoint.sh
