#!/bin/bash
set -e
ROOTDIR=$(dirname "$0")
ROOTDIR=$(cd "$ROOTDIR/.." && pwd)
DOCKER_IMAGE_VERSION=$(cat "$ROOTDIR/shared/definitions/docker_image_version")
# shellcheck source=../shared/lib/library.sh
source "$ROOTDIR/shared/lib/library.sh"

PASSENGER_DIR=
CACHE_DIR=
OUTPUT_DIR=
ARCHITECTURE=
NGINX_DIR=
NGINX_VERSION=
CONCURRENCY=2
SHOW_BACKTRACES=false
SHOW_TASKS=false
ARGV=

function usage()
{
	echo "Usage: ./build [OPTIONS] <TASKS...>"
	echo "Build binaries."
	echo
	echo "Required options:"
	echo "  -p DIR     Path to Passenger source directory"
	echo "  -c DIR     Path to cache directory"
	echo "  -o DIR     Path in which to store build products"
	echo "  -a ARCH    Architecture to build for (arm64, x86_64)"
	echo
	echo "Optional options:"
	echo "  -n DIR     Path to Nginx source directory"
	echo "  -N VER     Nginx version number"
	echo "  -j NUM     Set build concurrency. Default: 2"
	echo "  -t         Show backtraces on error"
	echo
	echo "  -T         Show all tasks"
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local ORIG_ARGV
	local opt
	while getopts "p:c:o:a:n:N:j:tTh" opt; do
		case "$opt" in
		p)
			PASSENGER_DIR="$OPTARG"
			;;
		c)
			CACHE_DIR="$OPTARG"
			;;
		o)
			OUTPUT_DIR="$OPTARG"
			;;
		a)
			ARCHITECTURE="$OPTARG"
			;;
		n)
			NGINX_DIR="$OPTARG"
			;;
		N)
			NGINX_VERSION="$OPTARG"
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		t)
			SHOW_BACKTRACES=true
			;;
		T)
			SHOW_TASKS=true
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true
	ORIG_ARGV=("$@")

	if [[ ${#ORIG_ARGV[@]} = 0 ]]; then
		SHOW_TASKS=true
	else
		ARGV=()
		ARGV+=("${ORIG_ARGV[@]}" finish)
		if $SHOW_BACKTRACES; then
			ARGV+=(--trace)
		fi
	fi

	if ! $SHOW_TASKS; then
		if [[ "$PASSENGER_DIR" = "" ]]; then
			echo "ERROR: please specify a Passenger source directory with -p."
			exit 1
		fi
		if [[ ! -e "$PASSENGER_DIR" ]]; then
			echo "ERROR: $PASSENGER_DIR does not exist."
			exit 1
		fi
		if [[ "$CACHE_DIR" = "" ]]; then
			echo "ERROR: please specify a cache directory with -c."
			exit 1
		fi
		if [[ ! -e "$CACHE_DIR" ]]; then
			echo "ERROR: $CACHE_DIR does not exist."
			exit 1
		fi
		if [[ "$OUTPUT_DIR" = "" ]]; then
			echo "ERROR: please specify an output directory with -o."
			exit 1
		fi
		if [[ ! -e "$OUTPUT_DIR" ]]; then
			echo "ERROR: $OUTPUT_DIR does not exist."
			exit 1
		fi
		if [[ "$ARCHITECTURE" = "" ]]; then
			echo "ERROR: please specify an architecture with -a."
			exit 1
		fi
		if [[ "$ARCHITECTURE" != arm64 && "$ARCHITECTURE" != x86_64 ]]; then
			echo "ERROR: specified architecture ($ARCHITECTURE) not recognized. Please specify either arm64 or x86_64."
		fi
		if [[ "$NGINX_DIR" != "" ]]; then
			if [[ ! -e "$NGINX_DIR" ]]; then
				echo "ERROR: $NGINX_DIR does not exist."
				exit 1
			fi
			if [[ "$NGINX_VERSION" = "" ]]; then
				echo "ERROR: please specify an Nginx version with -N."
				exit 1
			fi
		fi
	fi
}

parse_options "$@"

if tty -s; then
	TTY_ARGS="-t -i"
else
	TTY_ARGS=
fi

if [[ "$ARCHITECTURE" == x86_64 ]]; then
	ARCHITECTURE=arm64
fi

DOCKER_IMAGE=phusion/passenger_binary_build_automation

if $SHOW_TASKS; then
	exec docker run $TTY_ARGS --rm \
		-v "$ROOTDIR:/system:ro" \
		-e "APP_UID=$(/usr/bin/id -u)" \
		-e "APP_GID=$(/usr/bin/id -g)" \
		-e "SHOW_TASKS=true" \
		--platform "linux/$ARCHITECTURE" \
		"$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION" \
		/system/linux/support/build-script-docker-entrypoint.sh -T
else
	EXTRA_DOCKER_ARGS=()
	PASSENGER_DIR=$(absolute_path "$PASSENGER_DIR")
	CACHE_DIR=$(absolute_path "$CACHE_DIR")
	OUTPUT_DIR=$(absolute_path "$OUTPUT_DIR")
	if [[ "$NGINX_DIR" != "" ]]; then
		NGINX_DIR=$(absolute_path "$NGINX_DIR")
		EXTRA_DOCKER_ARGS+=(-v "$NGINX_DIR:/nginx:ro")
		if [[ "$NGINX_VERSION" != "" ]]; then
			EXTRA_DOCKER_ARGS+=(-e "NGINX_VERSION=$NGINX_VERSION")
		fi
	fi

	echo "-------- Entering Docker container --------"
	exec docker run $TTY_ARGS --rm \
		-v "$ROOTDIR:/system:ro" \
		-v "$PASSENGER_DIR:/passenger:ro" \
		-v "$CACHE_DIR:/cache" \
		-v "$OUTPUT_DIR:/output" \
		-e "APP_UID=$(/usr/bin/id -u)" \
		-e "APP_GID=$(/usr/bin/id -g)" \
		-e "SHOW_TASKS=false" \
		-e "CONCURRENCY=$CONCURRENCY" \
		--platform "linux/$ARCHITECTURE" \
		"${EXTRA_DOCKER_ARGS[@]}" \
		"$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION" \
		/system/linux/support/build-script-docker-entrypoint.sh \
		"${ARGV[@]}"
fi
